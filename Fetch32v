`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2015/01/02 14:00:56
// Design Name: 
// Module Name: Ifetc32
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Ifetc32(
    Instruction,
    PC_plus_4_out,
    Add_result,
    Read_data_1,
    Branch,
    nBranch,
    Jmp,
    Jal,
    Jrn,
    Zero,
    PC_out,
    clock,
    reset,
    opcplus4
    );

output [31:0]Instruction;
output [31:0]PC_plus_4_out;
input [31:0]Add_result;
input [31:0]Read_data_1;
input Branch;
input nBranch;
input Jmp;
input Jal;
input Jrn;
input Zero;
output[31:0] PC_out;
input clock,reset;
output[31:0] opcplus4;

wire[31:0] PC_plus_4;
reg[31:0] PC;
reg[31:0] next_PC;
//reg[31:0] Jpadr;
reg[31:0] opcplus4;

prgrom instmem(.clka(clock),.addra(PC[16:2]),.douta(Instruction)); 
    //defparam prgrom.lpm_width = 32;
   // defparam prgrom.lpm_widthad = 10;
    //defparam prgrom.lpm_file = "prgmip32.mif";
    //defparam prgrom.lpm_outdata = "UNREGISTERED";
    //defparam prgrom.lpm_address_control = "REGISTERED";
    
    assign PC_out = PC[31:0];
    assign PC_plus_4_out = PC_plus_4[31:0];
    assign PC_plus_4[31:0] = PC[31:0] + 1;
   // assign Instruction = Jpadr;
    
    always @ (posedge clock)
        begin
        if(((Branch==1)&&(Zero==1)||(nBranch==1)&&(Zero==0)))
            next_PC = Add_result;
        else if(Jrn==1)     next_PC = Read_data_1[31:0];
        else    next_PC = PC_plus_4[31:0];
        end
    
    always @ (negedge clock)
    begin
        if(reset==1)    PC<=32'b00000000000000000000000000000000;
        else if ((Jmp==1)||(Jal==1))
        begin
            opcplus4 = PC_plus_4[31:0];
            PC[31:0]<={6'b000000,Instruction[25:0]};
        end
     else   PC[31:0]<=next_PC[31:0];
     end
endmodule
